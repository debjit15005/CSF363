<program> → <moduleDeclarations><otherModules><driverModule><otherModules>
<moduleDeclarations> → <moduleDeclaration><moduleDeclarations>
<moduleDeclarations> → EPSILON    
<moduleDeclaration> →  DECLARE MODULE ID SEMICOL 
<otherModules> →  <module><otherModules>
<otherModules> → EPSILON
<driverModule> → DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> → DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret><moduleDef>
<ret> → RETURNS SQBO <output_plist> SQBC SEMICOL
<ret> → EPSILON
<input_plist> → ID COLON <dataType> <input_plist2>
<input_plist2> → COMMA ID COLON <dataType> <input_plist2>
<input_plist2> → EPSILON
<output_plist> → ID COLON <type> <output_plist2>
<output_plist2> → COMMA ID COLON <type> <output_plist2>
<output_plist2> → EPSILON
<dataType> → INTEGER
<dataType> → REAL
<dataType> → BOOLEAN
<dataType> → ARRAY SQBO <arr_range> SQBC OF <type>
<arr_range>→ <arr_index> RANGEOP <arr_index>
<type> → INTEGER
<type> → REAL
<type> → BOOLEAN
<moduleDef> → START <statements> END
<statements> → <statement> <statements>
<statements> → EPSILON 
<statement> → <ioStmt>
<statement> → <simpleStmt>
<statement> → <declareStmt>
<statement> → <conditionalStmt>
<statement> → <iterativeStmt>
<ioStmt> → GET_VALUE BO ID BC SEMICOL
<ioStmt> → PRINT BO <print_var> BC SEMICOL
<boolVal> → TRUE 
<boolVal> → FALSE
<print_var> → ID <which_ID>
<print_var> → NUM
<print_var> → RNUM
<print_var> → <boolVal>
<which_ID> → SQBO <num_or_id> SQBC
<which_ID> → EPSILON
<simpleStmt> → <assignmentStmt>
<simpleStmt> → <moduleReuseStmt>
<assignmentStmt> → ID <whichStmt>
<whichStmt> → <lvalueIDStmt>
<whichStmt> → <lvalueARRStmt>
<lvalueIDStmt> → ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> → SQBO <exprIndex> SQBC ASSIGNOP <expression> SEMICOL
<arr_index> → <sign> <num_or_id>
<num_or_id> → NUM
<num_or_id> → ID
<sign> → PLUS
<sign> → MINUS
<sign> → ε
<moduleReuseStmt> → <optional> USE MODULE ID WITH PARAMETERS <actual_para_list> SEMICOL
<optional> → SQBO <idList> SQBC ASSIGNOP
<optional> → EPSILON 
<idList> -> ID <idList2>
<idList2> -> COMMA ID <idList2>
<idList2> -> EPSILON
<expression> -> <abExpr>
<expression> -> <U>
<U> -> <uni_op> <new_NT>
<new_NT> -> BO <arithmeticExpr> BC
<new_NT> -> <con_var>
<uni_op> → PLUS
<uni_op> → MINUS 
<abExpr> → <AnyTerm> <Term7>
<Term7> → <logicalOp><AnyTerm><Term7>
<Term7> → EPSILON
<AnyTerm> → <arithmeticExpr> <Term8>
<AnyTerm> → <boolVal>
<Term8> → <relationalOp> <arithmeticExpr>
<Term8> → EPSILON
<con_var> → ID
<con_var> → NUM
<con_var> → RNUM
<arithmeticExpr> → <term> <arithmeticExpr2>
<arithmeticExpr2> → <low_op> <term>  <arithmeticExpr2>
<arithmeticExpr2> → EPSILON
<term> → <factor> <term2>
<term2> → <high_op> <factor> <term2>
<term2> → EPSILON
<factor> → BO <abExpr> BC
<factor> → NUM
<factor> → RNUM
<factor> → <boolVal>
<factor> → ID <factor2>
<factor2> → SQBO <exprIndex> SQBC
<factor2> → EPSILON
<exprIndex> → <sign> <exprIndex2>
<exprIndex> → <arrExpr>
<exprIndex2> → <num_or_id>
<exprIndex2> → BO <arrExpr> BC
<arrExpr> → <arrTerm> <arrExpr2>
<arrExpr2> → <low_op> <arrTerm> <arrExpr2>
<arrExpr2> → EPSILON
<arrTerm> → <arrFactor> <arrTerm2>
<arrTerm2> → <high_op> <arrFactor> <arrTerm2>
<arrTerm2> → EPSILON
<arrFactor> → ID
<arrFactor> → NUM
<arrFactor> → <boolVal>
<arrFactor> → BO <arrExpr> BC
<low_op> → PLUS
<low_op> → MINUS
<high_op> → MUL
<high_op> → DIV
<logicalOp> → AND
<logicalOp> → OR
<relationalOp> →  LT
<relationalOp> → LE
<relationalOp> → GT
<relationalOp> → GE
<relationalOp> → EQ
<relationalOp> → NE
<declareStmt> →  DECLARE <idList> COLON <dataType> SEMICOL
<conditionalStmt> → SWITCH BO ID BC START <caseStmts><default_stmt> END
<caseStmts> → CASE <value> COLON <statements> BREAK SEMICOL <caseStmts2>
<caseStmts2> → CASE <value> COLON <statements> BREAK SEMICOL <caseStmts2>
<caseStmts2> → EPSILON
<value> → NUM
<value> → TRUE
<value> → FALSE
<default_stmt> → DEFAULT COLON <statements> BREAK SEMICOL
<default_stmt> → EPSILON 
<iterativeStmt> → FOR BO ID IN <for_range> BC START <statements> END
<iterativeStmt> → WHILE BO <abExpr> BC START <statements> END
<for_range> → <for_index> RANGEOP <for_index>
<for_index> → <for_sign> <for_index2>
<for_index2> → NUM
<for_sign> → PLUS
<for_sign> → MINUS
<for_sign> → EPSILON
<actual_para_list> → <sign> <K> <Term9>
<Term9> → COMMA <sign> <K> <Term9>
<Term9> → EPSILON
<K> → NUM
<K> → RNUM
<K> → <boolVal>
<K> → ID <actual_para_list2>
<actual_para_list2> → SQBO <exprIndex> SQBC 
<actual_para_list2> → EPSILON